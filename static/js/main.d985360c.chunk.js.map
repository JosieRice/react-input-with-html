{"version":3,"sources":["../../src/utils.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["getCaretData","nodes","el","textNodeArr","treeWalker","document","NodeFilter","node","getAllTextnodes","n","position","setCaretPos","id","value","disabled","spellCheck","onChange","modifierArr","onSubmit","onBlur","onKeyUp","onKeyDown","hexDot","style","highlightThis","props","useState","inputWithHTML","setInputWithHTML","caretPos","useEffect","caretData","data","selection","window","range","placeCaret","inputDisplay","buildStyledString","highlighted","mutableInput","clone","re","RegExp","highlightedString","str","emitChange","e","enter","caretOffset","selected","preCaretRange","getCaretPosition","fontSize","mutableModifierArr","regexMatch","htmlMod","styles","match","modifier","mutableModifier","arr","uniqueArr","self","correctModifier","v","React","className","contentEditable","onInput","dangerouslySetInnerHTML","__html","App","inputHero","setInputHero","inputNav","setInputNav","setHighlightThis","handleSubmit","alert","enable","textAlign","margin","onClick","onMouseEnter","onMouseLeave","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d985360c.chunk.js","sourcesContent":["// not sure what this is doing, but should probably sanitize javascript injection\nexport const normalizeHtml = (str: string): string => {\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, ' ')\n}\n\n// getting current position of caret to set in state as a reference\nexport const getCaretPosition = (el: HTMLDivElement | null) => {\n  let caretOffset = 0\n\n  if (!el) return\n\n  if (typeof window.getSelection !== 'undefined') {\n    const range = window.getSelection()?.getRangeAt(0)\n    const selected = range?.toString().length\n    const preCaretRange = range?.cloneRange()\n\n    // @ts-ignore\n    preCaretRange.selectNodeContents(el)\n    // @ts-ignore\n    preCaretRange.setEnd(range.endContainer, range.endOffset)\n    // @ts-ignore\n    caretOffset = preCaretRange.toString().length - selected\n  }\n\n  return caretOffset\n}\n\nexport const getAllTextnodes = (el: HTMLDivElement) => {\n  let node\n  const textNodeArr = []\n\n  const treeWalker = document.createTreeWalker(\n    el,\n    NodeFilter.SHOW_TEXT,\n    null,\n    false\n  )\n\n  while ((node = treeWalker.nextNode())) textNodeArr.push(node)\n\n  return textNodeArr\n}\n\nexport const getCaretData = (\n  el: HTMLDivElement,\n  position: number,\n  setCaretPos: (arg: number) => void\n) => {\n  let node\n\n  const nodes = getAllTextnodes(el)\n\n  for (var n = 0; n < nodes.length; n++) {\n    // @ts-ignore\n    if (position > nodes[n].nodeValue.length && nodes[n + 1]) {\n      // remove amount from the position, go to next node\n      // @ts-ignore\n      position -= nodes[n].nodeValue.length\n    } else {\n      node = nodes[n]\n      break\n    }\n  }\n\n  // resets node and position settings if all html input is cleared\n\n  if (!node) {\n    setCaretPos(-1)\n\n    return { node: node, position: -1 }\n  }\n\n  // gives current position\n\n  return { node: node, position: position }\n}\n\ntype NodeData = {\n  node: Node\n  position: number\n}\n\nexport const placeCaret = (data: NodeData) => {\n  const selection = window.getSelection()\n  const range = document.createRange()\n\n  // programatic html generation can throws off the caret pos.\n\n  // this protects against placing caret where it can't go\n\n  const canPlaceCaret =\n    selection &&\n    data &&\n    data.node &&\n    data.position >= 0 &&\n    data.node.nodeValue &&\n    data.node.nodeValue.length >= data.position\n\n  if (canPlaceCaret) {\n    range.setStart(data.node, data.position)\n\n    range.collapse(true)\n\n    if (selection) {\n      selection.removeAllRanges()\n      selection.addRange(range)\n    }\n  }\n}\n","/**\n * an input element that can display programatic html but only takes string input\n * with a built in hex dot option\n */\n\nimport { clone } from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport styles from './styles.module.css'\nimport {\n  getCaretData,\n  getCaretPosition,\n  normalizeHtml,\n  placeCaret\n} from './utils'\n\ntype ModifierObj = {\n  regexMatch: RegExp\n  htmlMod: string | Function // if it's a function than it's matching many different strings possibly\n  match?: boolean\n}\n\ntype HexDotObj = {\n  enable: boolean\n  fontSize: number\n}\n\ntype Props = {\n  id: string\n  value: string\n  modifierArr: ModifierObj[]\n  onChange: (arg1: string) => void // your `setInput` string hook;\n  highlightThis?: string | boolean\n  onSubmit?: Function\n  disabled?: boolean\n  className?: string\n  onBlur?: any\n  onKeyUp?: any\n  onKeyDown?: any\n  spellCheck?: boolean\n  hexDot?: HexDotObj\n  style?: any\n}\n\nconst HTMLInput = ({\n  id,\n  value,\n  disabled = false,\n  spellCheck = true,\n  onChange,\n  modifierArr,\n  onSubmit,\n  onBlur,\n  onKeyUp,\n  onKeyDown,\n  hexDot,\n  style,\n  highlightThis,\n  ...props\n}: Props) => {\n  const [inputWithHTML, setInputWithHTML] = useState('')\n  const [caretPos, setCaretPos] = useState(-1)\n\n  useEffect(() => {\n    const el = document.getElementById(id) as HTMLDivElement\n    const caretData = getCaretData(el, caretPos, setCaretPos)\n\n    // only place caret if there is somewhere for it to go\n    if (caretData.node) placeCaret(caretData)\n  }, [inputWithHTML])\n\n  useEffect(() => {\n    const highlightedString = (inputDisplay: string): string => {\n      let mutableInput = clone(inputDisplay)\n      if (highlightThis && typeof highlightThis === 'string') {\n        // @ts-ignore\n        const re = new RegExp(`(?<!: *)${highlightThis}`, 'gi')\n\n        mutableInput = mutableInput.replace(\n          re,\n          `<span style=\"background-color: #b4ffc4\">${highlightThis}</span>`\n        )\n      } else if (highlightThis && typeof highlightThis === 'boolean') {\n        mutableInput = `<span style=\"background-color: #b4ffc4\">${inputDisplay}</span>`\n      }\n      return mutableInput\n    }\n\n    const inputDisplay = buildStyledString(value)\n    if (highlightThis) {\n      const highlighted = highlightedString(inputDisplay)\n      setInputWithHTML(highlighted)\n    } else {\n      setInputWithHTML(inputDisplay)\n    }\n  }, [highlightThis])\n\n  useEffect(() => {\n    if (value) {\n      const inputDisplay = buildStyledString(value)\n      setInputWithHTML(inputDisplay)\n    } else if (!value) {\n      setInputWithHTML('')\n    }\n  }, [value])\n\n  const emitChange = (e: any) => {\n    // handle enter and call onSubmit if it was give\n    const enter = e.keyCode === 13\n    if (enter && onSubmit) {\n      e.preventDefault()\n      onSubmit()\n      return\n    }\n    if (enter) {\n      e.preventDefault()\n      return\n    }\n\n    const el = e.currentTarget\n    const position = getCaretPosition(el)\n\n    onChange(el.innerText)\n    setCaretPos(position || -1)\n  }\n\n  const buildStyledString = (value: string): string => {\n    let mutableInput = clone(value)\n\n    const fontSize = hexDot?.fontSize === 24 ? 24 : 11\n\n    const mutableModifierArr = clone(modifierArr)\n\n    if (hexDot?.enable) {\n      const dynamicHexMod = (value: string): any => {\n        return `<span class=\"${\n          fontSize === 24 ? styles.hexdot_24 : styles.hexdot_11\n        }\" style=\"--color: ${value}\">${value}</span>`\n      }\n\n      const hexDot = {\n        // only matches hex codes that aren't in style\n        regexMatch: /(?<!:\\s*)#[0-9A-F]{6}/gi,\n        htmlMod: dynamicHexMod\n      }\n      mutableModifierArr.push(hexDot)\n    }\n\n    // adds match true or false to modifierObj\n    const mutableModifier = mutableModifierArr.map((modifier) => {\n      const match = modifier.regexMatch.test(value)\n      modifier.match = match\n      return modifier\n    })\n\n    // for each match, find every instance and run the modification\n    mutableModifier.forEach((modifier) => {\n      if (modifier.match) {\n        const arr = mutableInput?.match(modifier.regexMatch)\n        const unique = (value: any, index: any, self: any) => {\n          return self.indexOf(value) === index\n        }\n        const uniqueArr = arr?.filter(unique)\n\n        const modifyAll = () => {\n          const value = uniqueArr?.forEach((v) => {\n            const correctModifier =\n              typeof modifier.htmlMod === 'string'\n                ? modifier.htmlMod\n                : modifier.htmlMod(v)\n\n            // function htmlMods can match many different strings and need special treatment\n            if (typeof modifier.htmlMod === 'function') {\n              const re = new RegExp(v, 'g')\n              mutableInput = mutableInput?.replace(re, correctModifier)\n            } else {\n              mutableInput = mutableInput?.replace(\n                modifier.regexMatch,\n                correctModifier\n              )\n            }\n          })\n          return value\n        }\n\n        modifyAll()\n      }\n    })\n\n    // clears out any new lines\n    const newLineRegex = /\\r?\\n|\\r/g\n    mutableInput.replace(newLineRegex, '')\n\n    return mutableInput\n  }\n\n  return (\n    <div\n      id={id}\n      // respects any spaces and styles close to a native input\n      className={styles.input}\n      contentEditable={!disabled}\n      onInput={emitChange}\n      onBlur={onBlur || emitChange}\n      onKeyUp={onKeyUp || emitChange}\n      onKeyDown={onKeyDown || emitChange}\n      dangerouslySetInnerHTML={{ __html: normalizeHtml(inputWithHTML) }}\n      spellCheck={spellCheck}\n      style={style}\n      {...props}\n    />\n  )\n}\n\nexport default HTMLInput\n","import React, { useState } from 'react'\nimport HTMLInput from 'react-input-with-html'\nimport 'react-input-with-html/dist/index.css'\nimport './style.css'\n\nconst App = () => {\n  const [inputHero, setInputHero] = useState('')\n  const [inputNav, setInputNav] = useState('')\n  const [highlightThis, setHighlightThis] = useState<string | boolean>('')\n\n  const handleSubmit = () => {\n    // submit your own input places\n    alert(`You just called submit can have this in state: ${inputHero}`)\n  }\n\n  const modifierArr = [\n    {\n      regexMatch: /\\+/g,\n      htmlMod: `<span style=\"color: #a3a3a3\">+</span>`\n    }\n  ]\n\n  const hexDotHero = {\n    enable: true,\n    fontSize: 24\n  }\n\n  const hexDotNav = {\n    enable: true,\n    fontSize: 11\n  }\n\n  return (\n    <>\n      <h1 className={'title'}>Hero Search From Stocksy</h1>\n      <HTMLInput\n        id='input'\n        value={inputHero}\n        onChange={setInputHero}\n        onSubmit={handleSubmit}\n        modifierArr={modifierArr}\n        spellCheck={false}\n        hexDot={hexDotHero}\n        highlightThis={highlightThis}\n      />\n\n      <div style={{ textAlign: 'center', margin: 12 }}>\n        <button\n          onClick={() => setInputHero('#E33CC7')}\n          onMouseEnter={() => setHighlightThis('#E33CC7')}\n          onMouseLeave={() => setHighlightThis('')}\n        >\n          #E33CC7\n        </button>\n      </div>\n\n      <div style={{ textAlign: 'center', margin: 12 }}>\n        <button\n          onClick={() => setInputHero('')}\n          onMouseEnter={() => setHighlightThis(true)}\n          onMouseLeave={() => setHighlightThis('')}\n        >\n          Delete\n        </button>\n      </div>\n\n      <h1 className={'title'}>Nav Search From Stocksy</h1>\n      <HTMLInput\n        id='input-nav'\n        value={inputNav}\n        onChange={setInputNav}\n        onSubmit={handleSubmit}\n        modifierArr={modifierArr}\n        spellCheck={false}\n        hexDot={hexDotNav}\n      />\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}